{"id":"pubsub/v1/doc/doc_google_protobuf_timestamp","type":"class","overview":"<p>\n  This class allows you interact with Cloud Pub/Sub.\n</p>\n\n\n\n<p>\n  First, install <code>@google-cloud/pubsub</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/pubsub</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/pubsub</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar pubsub = require('@google-cloud/pubsub')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar pubsub = require('@google-cloud/pubsub')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/pubsub</code> are outlined in our <a href=\"#/docs/pubsub/v0.13.2/guides/authentication\">Authentication guide</a>.\n</p>\n","source":"packages\\pubsub\\src\\v1\\doc\\doc_google_protobuf_timestamp.js","parent":"pubsub","children":[],"methods":[{"type":"instance","description":"<p>A Timestamp represents a point in time independent of any time zone or calendar, represented as seconds and fractions of seconds at nanosecond resolution in UTC Epoch time. It is encoded using the Proleptic Gregorian Calendar which extends the Gregorian calendar backwards to year one. It is encoded assuming all minutes are 60 seconds long, i.e. leap seconds are &quot;smeared&quot; so that no leap second table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from RFC 3339 date strings. See <a href=\"https://www.ietf.org/rfc/rfc3339.txt\">https://www.ietf.org/rfc/rfc3339.txt</a>.</p><p>Example 1: Compute Timestamp from POSIX <code>time()</code>.</p><pre><code>Timestamp timestamp; timestamp.set_seconds(time(NULL)); timestamp.set_nanos(0); </code></pre><p>Example 2: Compute Timestamp from POSIX <code>gettimeofday()</code>.</p><pre><code>struct timeval tv; gettimeofday(&amp;tv, NULL); Timestamp timestamp; timestamp.set_seconds(tv.tv_sec); timestamp.set_nanos(tv.tv_usec * 1000); </code></pre><p>Example 3: Compute Timestamp from Win32 <code>GetSystemTimeAsFileTime()</code>.</p><pre><code>FILETIME ft; GetSystemTimeAsFileTime(&amp;ft); UINT64 ticks = (((UINT64)ft.dwHighDateTime) &lt;&lt; 32) | ft.dwLowDateTime; // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z. Timestamp timestamp; timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL)); timestamp.set_nanos((INT32) ((ticks % 10000000) * 100)); </code></pre><p>Example 4: Compute Timestamp from Java <code>System.currentTimeMillis()</code>.</p><pre><code>long millis = System.currentTimeMillis(); Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000) .setNanos((int) ((millis % 1000) * 1000000)).build(); </code></pre><p>Example 5: Compute Timestamp from current time in Python.</p><pre><code>timestamp = Timestamp() timestamp.GetCurrentTime() </code></pre>","source":"packages\\pubsub\\src\\v1\\doc\\doc_google_protobuf_timestamp.js#L89","resources":[],"examples":[],"params":[{"name":"seconds","description":"<p> Represents seconds of UTC time since Unix epoch  1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to  9999-12-31T23:59:59Z inclusive.</p>","types":["number"],"optional":false,"nullable":false},{"name":"nanos","description":"<p> Non-negative fractions of a second at nanosecond resolution. Negative  second values with fractions must still have non-negative nanos values  that count forward in time. Must be from 0 to 999,999,999  inclusive.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"doc_google_protobuf_timestamp.json"}